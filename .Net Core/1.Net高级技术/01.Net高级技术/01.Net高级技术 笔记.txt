1 多项目开发
一个大项目分多个小项目开发
生成exe主程序和多个dll类库
各个项目之间相互引用以使用功能
类库中的类必须声明成public，否则不能被当前程序集/项目之外的外界使用

2 多项目中的配置文件的使用
winform项目	 app.config
web项目中	web.config

所有读取配置文件信息，都只会使用主启动项目的config中读取

3 索引器
索引器没有名字，索引器的内部本质：是方法。
定义方法：
public 类型 this[参数]
{get;set;}
转变成get和set两个方法，set多一个参数value赋值
可以是只读或者只写;
自己创建一个索引器，索引访问，键访问
为什么字符串只能char ch = s[5],不能s[5]='a'
字符串不可变性，只读索引
不能在静态类中声明索引
开发中自己写索引器的机会比较少

4 密闭类和静态类及扩展方法（静态方法）
密封类sealed不能有子类，不能被继承
static静态类不能被继承，不能new，只能声明static成员 例如SqlHelper等工具类
扩展方法：
所在的类必须是static类
扩展方法的第一个参数类型是被扩展的类型，类型前面标注this
使用扩展方法的代码必须添加对扩展方法所在类的namespace的using
扩展方法最终其实还是被编译器处理成普通静态方法的调用
扩展方法由于本质上还是静态方法的调用，所以不能访问类外部访问不了的成员


5深copy和浅copy
引用类型对象变量赋值的时候是指向同一个对象
可以通过自定义一个copy方法赋值出一个新的对象
如果对象之间有引用关系，如果拷贝的时候共享被引用的对象就是浅拷贝，如果被引用的对象也拷贝一份出来就是深拷贝。


6 结构体、值类型及引用类型
结构体和类的区别：结构体赋值是根据对象内容复制一份出来
值类型：均隐式派生自System.ValueType（虽然ValueType也是继承自Object，不过是特立独行的一个分支）
数值类型，bool，结构体，枚举

引用类型：直接或间接继承自object类型的
数组，字符串，类，接口等

引用类型的变量赋值只赋值对对象的引用：引用类型在堆内存
值类型变量赋值会copy一个副本，值类型在栈内存中，值类型一定是sealed的



7 概念定义CTS、CLS、CLR
.Net将不同编程语言编译生成统一标准的中间语言IL（MSIL），这样以支持多语言开发之间互相的程序集（Assembly，dll、exe）调用
CTS：通用数据类型	Common Type System
CLS：通用语言规范 	Common Language Specification
CLR：IL公共语言运行时	Common Language Runtime   （GC垃圾回收、GIT即时编译器）
CLR驱动IL运行
栈内存会方法结束后自动释放，堆内存则需要GC来回收 当一个对象没有被引用时，就可以被GC自动回收掉了


8 拆箱装箱
值类型赋值给object类型变量时，会发生装箱：包装成object
object类型变量赋值给值类型赋值时，会发生拆箱
注意一点：
拆箱时，不能拆成非原值类型，如果要转换，需要先拆回原类型再转换
int i = 1;
object obj1 = i;
//long l = (long)obj1;//错误
int j = (int)obj1;
long l = (long)j;//正确

开发实践中，ExecuteScalar根据不同数据库返回的原始值类型可能就不一样，所以直接拆箱可能会报错
这时候推荐的方式是：
int i = Convert.ToInt32(ExecuteScalar());


9 关于相等 

object.ReferenceEquals 是判断两个对象是否指向同一个对象
== 效果和object.ReferenceEquals 默认是一样的
但注意string类重写了Equals方法，是比较内容，所以即使不是一个对象，但内容相同，用==判断结果也会是true
我们自定义的类也可以重载Equals方法和==方法以进行内容的比较判断是否相等
c#要求==重载时必须同时重载!=运算符
详见Demo


10 字符串缓冲池
C#对常用字符串对象做了一个重用的方法   
如果字符串初始值相同也没有new，则指向同一个对象


11 ref和out关键字的使用

ref相当于把方法的实参直接传递到方法体里面进行处理，在函数内部可以改变外部变量的指向

不加ref，object则只传递引用，值类型只是copy一个值的副本传递进去

调用方法时需要在实参前加上ref

ref目的是函数改变外部变量的指向/值
传递前必须赋值
可以给ref参数赋值也可以不改变

out目的是函数返回多个返回值
传递前不必赋值
必须给out参数赋值

***out用途之一：
bool int.TryParse(s,out i) 最直接应用



