异步编程：
核心：异步编程基于委托实现

步骤：
1 定义委托
2 根据委托实现方法
3 实例化委托变量/对象并将实现方法赋值给委托变量
4 开始异步调用任务:
	4.1通过委托对象的.BeginInvoke方法异步调用任务
		IAsyncResult result = objCalculatorDelegate.BeginInvoke(35, null, null);
	4.2并行执行其他任务
	4.3通过委托对象的.EndInvoke方法监测任务执行情况并获取异步执行结果
		int r = objCalculatorDelegate.EndInvoke(result);


异步执行效率根据计算机性能和CPU空闲状态会呈现每次并不完全相同的执行时间

            /* 特此说明
             * BeginInvoke的第三个参数是回调函数的参数，可以是多种类型=异步结果接口对象中的.AsyncState字段，类型需要从object进行转换
             * 特此说明

异步编程总结：
1 异步编程是建立在委托的基础上的一种编程方法。
2 异步调用的每个方法都是在独立的线程中执行的，BeginInvoke是封装了多线程机制，简化了的多线程，本质上就是多线程程序。
3 比较适合在后台运行较为耗时的《简单任务》。并且任务之间要求相互独立。任务中不应该有直接访问可视化控件的代码。
4 如果后台任务要求必须按照特定顺序执行，或者访问共享资源，则异步编程不太适合。这时候应该选择多线程开发。

