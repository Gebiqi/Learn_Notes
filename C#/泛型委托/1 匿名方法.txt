匿名方法：
这个方法没有具体名称，而只有委托关键字、方法参数、方法体，所以称为匿名方法。

匿名方法允许将代码块（方法体）通过委托变量作为参数传递，以代替单独定义的方法。

CalculatorDelegate objCal = delegate(int a,int b)
{
	return a + b;
};

总结：
方法体要以delegate开头，其后是参数列表，后面紧跟花括号编写方法体，最后以分号结尾。
匿名方法就是将方法定义与委托变量赋值两个步骤合在一起，省略了方法的单独定义。
如果一个方法有一个委托类型的参数，可以直接将匿名方法作为实参。

 
后面有Lambda表达式更简化：
(参数列表)=>{方法体}
CalculatorDelegate objCal = (int a,int b)=>a + b;
如果参数只有一个，可以省略()
如果方法体只有一行代码，可以省略{}和return
参数类型可以是明确类型或者是推断类型
如果是推断类型，则参数的数据类型将由编译器根据上下文自动推断出来
CalculatorDelegate objCal = (a,b)=>a + b;


Lambda表达式与匿名方法比较：
Lambda表达式本身就是匿名方法
lambda表达式的参数允许不指明参数类型，而匿名方法的参数必须明确指明参数类型
lambda表达式方法体允许由单一表达式或者多条语句组成，而匿名方法不允许单一表达式形式。

如果方法只需要使用一次，则Lambda表达式则非常爽

实际开发阶段，自己定义泛型委托的机会会很少，更多的时候是使用微软给我们定义好的Func委托和Action委托