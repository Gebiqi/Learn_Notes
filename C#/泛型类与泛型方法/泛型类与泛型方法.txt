一、泛型类：
优点：增加类型安全，带来编码方便，无需后面进行数据类型转换
常用泛型：泛型类、泛型方法
后续深入：泛型委托

泛型类的规范：public class 类名<T> {类的成员...};
T:仅仅是一个占位符，只要符合C#命名规范即可使用，但一般都使用T
T:表示一个通用的数据类型，在使用的时候用实际类型代替。
T:泛型类可以在定义中可以包含多个任意类型的参数，参数之间用逗号分隔开

例如：class MyGenericClass<T1,T2,T3>{...}

各种类型可以用作成员变量的类型，属性或方法等成员的返回类型以及方法的参数类型等


编写一个入栈和出栈操作的通用类 详见Demo
泛型类试用总结：
增加类型安全，无需拆装箱操作




二、Default关键字的使用

不能随便假设T是某种类型，也许这种类型的构造方法是私有的，不能用new初始化，或者不能直接赋值null
解决方法
private T obj1;
obj1 = default(T);//如果是值类型就给默认值，一般是0，如果是引用类型，则赋值null



三、添加约束类型的泛型类
        private class MyGenericClass2<T1, T2, T3>
            where T1 : struct //类型必须是值类型
            where T2 : class  //类型必须是引用类型
            where T3 : new()  //类型必须有一个无参数构造方法,且这个类型必须放到最后
            //基类类型、接口类型
 
四、应用带约束的泛型类
***泛型类在对象实例化时需要根据实际情况将T转换成具体数据类型***
类似功能的类，可以抽取相同的变成泛型T
应用具体请参考Demo


五、泛型方法的使用


学习怎么定义和使用
思考在什么场合使用
当一个类/方法的数据类型发生变化，需要重新编写类/方法
方法重载只能解决方法名可以重复使用的问题，学会泛型之后，定义方法可以考虑泛型方法
类似功能的类，可以抽取相同的变成泛型T，<T>放到类的后面
与通用数据访问类思路相同	"提取不变的,封装变化的"

***通用性抽取也不能没有限度，超过一定限度的通用设计也会对后期使用有一定问题
应该考虑好“度”的问题
泛型的，在代码写法上只要没有错误，没有统一的规范
详见Demo